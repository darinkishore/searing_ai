/* tslint:disable */
/* eslint-disable */
/**
 * Searing.ai
 * Learn shit. Real fast.
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  Document,
  DocumentForm,
  PaginatedDocumentList,
  PaginatedQuestionList,
  PaginatedSummaryList,
  PaginatedUserList,
  PatchedQuestion,
  PatchedSummary,
  Question,
  Summary,
  User,
} from '../models';
import {
    DocumentFromJSON,
    DocumentToJSON,
    DocumentFormFromJSON,
    DocumentFormToJSON,
    PaginatedDocumentListFromJSON,
    PaginatedDocumentListToJSON,
    PaginatedQuestionListFromJSON,
    PaginatedQuestionListToJSON,
    PaginatedSummaryListFromJSON,
    PaginatedSummaryListToJSON,
    PaginatedUserListFromJSON,
    PaginatedUserListToJSON,
    PatchedQuestionFromJSON,
    PatchedQuestionToJSON,
    PatchedSummaryFromJSON,
    PatchedSummaryToJSON,
    QuestionFromJSON,
    QuestionToJSON,
    SummaryFromJSON,
    SummaryToJSON,
    UserFromJSON,
    UserToJSON,
} from '../models';

export interface ApiDocFormCreateRequest {
    file?: string;
    title?: string;
}

export interface ApiDocumentsCreateRequest {
    id: number;
    createdAt: Date;
    updatedAt: Date;
    user: string;
    summary: number;
    questions: Array<number>;
    file?: string;
    title?: string;
    ocrText?: string | null;
}

export interface ApiDocumentsDestroyRequest {
    id: string;
}

export interface ApiDocumentsListRequest {
    page?: number;
}

export interface ApiDocumentsPartialUpdateRequest {
    id: string;
    id2?: number;
    file?: string;
    createdAt?: Date;
    title?: string;
    updatedAt?: Date;
    user?: string;
    summary?: number;
    questions?: Array<number>;
    ocrText?: string | null;
}

export interface ApiDocumentsQuestionsCreateRequest {
    documentId: string;
    question?: Question;
}

export interface ApiDocumentsQuestionsDestroyRequest {
    documentId: string;
    id: string;
}

export interface ApiDocumentsQuestionsListRequest {
    documentId: string;
    page?: number;
}

export interface ApiDocumentsQuestionsPartialUpdateRequest {
    documentId: string;
    id: string;
    patchedQuestion?: PatchedQuestion;
}

export interface ApiDocumentsQuestionsRetrieveRequest {
    documentId: string;
    id: string;
}

export interface ApiDocumentsQuestionsUpdateRequest {
    documentId: string;
    id: string;
    question?: Question;
}

export interface ApiDocumentsRetrieveRequest {
    id: string;
}

export interface ApiDocumentsStartSummaryGenerationRetrieveRequest {
    id: string;
}

export interface ApiDocumentsSummaryCreateRequest {
    documentId: string;
    summary?: Summary;
}

export interface ApiDocumentsSummaryDestroyRequest {
    documentId: string;
    id: string;
}

export interface ApiDocumentsSummaryListRequest {
    documentId: string;
    page?: number;
}

export interface ApiDocumentsSummaryPartialUpdateRequest {
    documentId: string;
    id: string;
    patchedSummary?: PatchedSummary;
}

export interface ApiDocumentsSummaryRetrieveRequest {
    documentId: string;
    id: string;
}

export interface ApiDocumentsSummaryUpdateRequest {
    documentId: string;
    id: string;
    summary?: Summary;
}

export interface ApiDocumentsUpdateRequest {
    id: string;
    id2: number;
    createdAt: Date;
    updatedAt: Date;
    user: string;
    summary: number;
    questions: Array<number>;
    file?: string;
    title?: string;
    ocrText?: string | null;
}

export interface ApiUsersListRequest {
    page?: number;
}

export interface ApiUsersRetrieveRequest {
    id: number;
}

/**
 * 
 */
export class ApiApi extends runtime.BaseAPI {

    /**
     * API endpoint that allows documents to be created.
     */
    async apiDocFormCreateRaw(requestParameters: ApiDocFormCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<DocumentForm>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // ApiKeyAuth authentication
        }

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const consumes: runtime.Consume[] = [
            { contentType: 'multipart/form-data' },
            { contentType: 'application/json' },
        ];
        // @ts-ignore: canConsumeForm may be unused
        const canConsumeForm = runtime.canConsumeForm(consumes);

        let formParams: { append(param: string, value: any): any };
        let useForm = false;
        if (useForm) {
            formParams = new FormData();
        } else {
            formParams = new URLSearchParams();
        }

        if (requestParameters.file !== undefined) {
            formParams.append('file', requestParameters.file as any);
        }

        if (requestParameters.title !== undefined) {
            formParams.append('title', requestParameters.title as any);
        }

        const response = await this.request({
            path: `/api/doc-form`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: formParams,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => DocumentFormFromJSON(jsonValue));
    }

    /**
     * API endpoint that allows documents to be created.
     */
    async apiDocFormCreate(requestParameters: ApiDocFormCreateRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<DocumentForm> {
        const response = await this.apiDocFormCreateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * API endpoint that allows documents to be created.
     */
    async apiDocFormRetrieveRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<DocumentForm>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // ApiKeyAuth authentication
        }

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/api/doc-form`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => DocumentFormFromJSON(jsonValue));
    }

    /**
     * API endpoint that allows documents to be created.
     */
    async apiDocFormRetrieve(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<DocumentForm> {
        const response = await this.apiDocFormRetrieveRaw(initOverrides);
        return await response.value();
    }

    /**
     * Allows you to list, create, retrieve, update, and destroy documents.
     */
    async apiDocumentsCreateRaw(requestParameters: ApiDocumentsCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Document>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling apiDocumentsCreate.');
        }

        if (requestParameters.createdAt === null || requestParameters.createdAt === undefined) {
            throw new runtime.RequiredError('createdAt','Required parameter requestParameters.createdAt was null or undefined when calling apiDocumentsCreate.');
        }

        if (requestParameters.updatedAt === null || requestParameters.updatedAt === undefined) {
            throw new runtime.RequiredError('updatedAt','Required parameter requestParameters.updatedAt was null or undefined when calling apiDocumentsCreate.');
        }

        if (requestParameters.user === null || requestParameters.user === undefined) {
            throw new runtime.RequiredError('user','Required parameter requestParameters.user was null or undefined when calling apiDocumentsCreate.');
        }

        if (requestParameters.summary === null || requestParameters.summary === undefined) {
            throw new runtime.RequiredError('summary','Required parameter requestParameters.summary was null or undefined when calling apiDocumentsCreate.');
        }

        if (requestParameters.questions === null || requestParameters.questions === undefined) {
            throw new runtime.RequiredError('questions','Required parameter requestParameters.questions was null or undefined when calling apiDocumentsCreate.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // ApiKeyAuth authentication
        }

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const consumes: runtime.Consume[] = [
            { contentType: 'multipart/form-data' },
            { contentType: 'application/x-www-form-urlencoded' },
        ];
        // @ts-ignore: canConsumeForm may be unused
        const canConsumeForm = runtime.canConsumeForm(consumes);

        let formParams: { append(param: string, value: any): any };
        let useForm = false;
        if (useForm) {
            formParams = new FormData();
        } else {
            formParams = new URLSearchParams();
        }

        if (requestParameters.id !== undefined) {
            formParams.append('id', requestParameters.id as any);
        }

        if (requestParameters.file !== undefined) {
            formParams.append('file', requestParameters.file as any);
        }

        if (requestParameters.createdAt !== undefined) {
            formParams.append('created_at', requestParameters.createdAt as any);
        }

        if (requestParameters.title !== undefined) {
            formParams.append('title', requestParameters.title as any);
        }

        if (requestParameters.updatedAt !== undefined) {
            formParams.append('updated_at', requestParameters.updatedAt as any);
        }

        if (requestParameters.user !== undefined) {
            formParams.append('user', requestParameters.user as any);
        }

        if (requestParameters.summary !== undefined) {
            formParams.append('summary', requestParameters.summary as any);
        }

        if (requestParameters.questions) {
            formParams.append('questions', requestParameters.questions.join(runtime.COLLECTION_FORMATS["csv"]));
        }

        if (requestParameters.ocrText !== undefined) {
            formParams.append('ocr_text', requestParameters.ocrText as any);
        }

        const response = await this.request({
            path: `/api/documents`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: formParams,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => DocumentFromJSON(jsonValue));
    }

    /**
     * Allows you to list, create, retrieve, update, and destroy documents.
     */
    async apiDocumentsCreate(requestParameters: ApiDocumentsCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Document> {
        const response = await this.apiDocumentsCreateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Allows you to list, create, retrieve, update, and destroy documents.
     */
    async apiDocumentsDestroyRaw(requestParameters: ApiDocumentsDestroyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling apiDocumentsDestroy.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // ApiKeyAuth authentication
        }

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/api/documents/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Allows you to list, create, retrieve, update, and destroy documents.
     */
    async apiDocumentsDestroy(requestParameters: ApiDocumentsDestroyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.apiDocumentsDestroyRaw(requestParameters, initOverrides);
    }

    /**
     * Allows you to list, create, retrieve, update, and destroy documents.
     */
    async apiDocumentsListRaw(requestParameters: ApiDocumentsListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PaginatedDocumentList>> {
        const queryParameters: any = {};

        if (requestParameters.page !== undefined) {
            queryParameters['page'] = requestParameters.page;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // ApiKeyAuth authentication
        }

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/api/documents`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PaginatedDocumentListFromJSON(jsonValue));
    }

    /**
     * Allows you to list, create, retrieve, update, and destroy documents.
     */
    async apiDocumentsList(requestParameters: ApiDocumentsListRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PaginatedDocumentList> {
        const response = await this.apiDocumentsListRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Allows you to list, create, retrieve, update, and destroy documents.
     */
    async apiDocumentsPartialUpdateRaw(requestParameters: ApiDocumentsPartialUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Document>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling apiDocumentsPartialUpdate.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // ApiKeyAuth authentication
        }

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const consumes: runtime.Consume[] = [
            { contentType: 'multipart/form-data' },
            { contentType: 'application/x-www-form-urlencoded' },
        ];
        // @ts-ignore: canConsumeForm may be unused
        const canConsumeForm = runtime.canConsumeForm(consumes);

        let formParams: { append(param: string, value: any): any };
        let useForm = false;
        if (useForm) {
            formParams = new FormData();
        } else {
            formParams = new URLSearchParams();
        }

        if (requestParameters.id2 !== undefined) {
            formParams.append('id', requestParameters.id2 as any);
        }

        if (requestParameters.file !== undefined) {
            formParams.append('file', requestParameters.file as any);
        }

        if (requestParameters.createdAt !== undefined) {
            formParams.append('created_at', requestParameters.createdAt as any);
        }

        if (requestParameters.title !== undefined) {
            formParams.append('title', requestParameters.title as any);
        }

        if (requestParameters.updatedAt !== undefined) {
            formParams.append('updated_at', requestParameters.updatedAt as any);
        }

        if (requestParameters.user !== undefined) {
            formParams.append('user', requestParameters.user as any);
        }

        if (requestParameters.summary !== undefined) {
            formParams.append('summary', requestParameters.summary as any);
        }

        if (requestParameters.questions) {
            formParams.append('questions', requestParameters.questions.join(runtime.COLLECTION_FORMATS["csv"]));
        }

        if (requestParameters.ocrText !== undefined) {
            formParams.append('ocr_text', requestParameters.ocrText as any);
        }

        const response = await this.request({
            path: `/api/documents/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: formParams,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => DocumentFromJSON(jsonValue));
    }

    /**
     * Allows you to list, create, retrieve, update, and destroy documents.
     */
    async apiDocumentsPartialUpdate(requestParameters: ApiDocumentsPartialUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Document> {
        const response = await this.apiDocumentsPartialUpdateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Allows you to list, create, retrieve, update, and destroy questions.
     */
    async apiDocumentsQuestionsCreateRaw(requestParameters: ApiDocumentsQuestionsCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Question>> {
        if (requestParameters.documentId === null || requestParameters.documentId === undefined) {
            throw new runtime.RequiredError('documentId','Required parameter requestParameters.documentId was null or undefined when calling apiDocumentsQuestionsCreate.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // ApiKeyAuth authentication
        }

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/api/documents/{document_id}/questions`.replace(`{${"document_id"}}`, encodeURIComponent(String(requestParameters.documentId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: QuestionToJSON(requestParameters.question),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => QuestionFromJSON(jsonValue));
    }

    /**
     * Allows you to list, create, retrieve, update, and destroy questions.
     */
    async apiDocumentsQuestionsCreate(requestParameters: ApiDocumentsQuestionsCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Question> {
        const response = await this.apiDocumentsQuestionsCreateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Allows you to list, create, retrieve, update, and destroy questions.
     */
    async apiDocumentsQuestionsDestroyRaw(requestParameters: ApiDocumentsQuestionsDestroyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.documentId === null || requestParameters.documentId === undefined) {
            throw new runtime.RequiredError('documentId','Required parameter requestParameters.documentId was null or undefined when calling apiDocumentsQuestionsDestroy.');
        }

        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling apiDocumentsQuestionsDestroy.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // ApiKeyAuth authentication
        }

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/api/documents/{document_id}/questions/{id}`.replace(`{${"document_id"}}`, encodeURIComponent(String(requestParameters.documentId))).replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Allows you to list, create, retrieve, update, and destroy questions.
     */
    async apiDocumentsQuestionsDestroy(requestParameters: ApiDocumentsQuestionsDestroyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.apiDocumentsQuestionsDestroyRaw(requestParameters, initOverrides);
    }

    /**
     * Allows you to list, create, retrieve, update, and destroy questions.
     */
    async apiDocumentsQuestionsListRaw(requestParameters: ApiDocumentsQuestionsListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PaginatedQuestionList>> {
        if (requestParameters.documentId === null || requestParameters.documentId === undefined) {
            throw new runtime.RequiredError('documentId','Required parameter requestParameters.documentId was null or undefined when calling apiDocumentsQuestionsList.');
        }

        const queryParameters: any = {};

        if (requestParameters.page !== undefined) {
            queryParameters['page'] = requestParameters.page;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // ApiKeyAuth authentication
        }

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/api/documents/{document_id}/questions`.replace(`{${"document_id"}}`, encodeURIComponent(String(requestParameters.documentId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PaginatedQuestionListFromJSON(jsonValue));
    }

    /**
     * Allows you to list, create, retrieve, update, and destroy questions.
     */
    async apiDocumentsQuestionsList(requestParameters: ApiDocumentsQuestionsListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PaginatedQuestionList> {
        const response = await this.apiDocumentsQuestionsListRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Allows you to list, create, retrieve, update, and destroy questions.
     */
    async apiDocumentsQuestionsPartialUpdateRaw(requestParameters: ApiDocumentsQuestionsPartialUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Question>> {
        if (requestParameters.documentId === null || requestParameters.documentId === undefined) {
            throw new runtime.RequiredError('documentId','Required parameter requestParameters.documentId was null or undefined when calling apiDocumentsQuestionsPartialUpdate.');
        }

        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling apiDocumentsQuestionsPartialUpdate.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // ApiKeyAuth authentication
        }

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/api/documents/{document_id}/questions/{id}`.replace(`{${"document_id"}}`, encodeURIComponent(String(requestParameters.documentId))).replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: PatchedQuestionToJSON(requestParameters.patchedQuestion),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => QuestionFromJSON(jsonValue));
    }

    /**
     * Allows you to list, create, retrieve, update, and destroy questions.
     */
    async apiDocumentsQuestionsPartialUpdate(requestParameters: ApiDocumentsQuestionsPartialUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Question> {
        const response = await this.apiDocumentsQuestionsPartialUpdateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Allows you to list, create, retrieve, update, and destroy questions.
     */
    async apiDocumentsQuestionsRetrieveRaw(requestParameters: ApiDocumentsQuestionsRetrieveRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Question>> {
        if (requestParameters.documentId === null || requestParameters.documentId === undefined) {
            throw new runtime.RequiredError('documentId','Required parameter requestParameters.documentId was null or undefined when calling apiDocumentsQuestionsRetrieve.');
        }

        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling apiDocumentsQuestionsRetrieve.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // ApiKeyAuth authentication
        }

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/api/documents/{document_id}/questions/{id}`.replace(`{${"document_id"}}`, encodeURIComponent(String(requestParameters.documentId))).replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => QuestionFromJSON(jsonValue));
    }

    /**
     * Allows you to list, create, retrieve, update, and destroy questions.
     */
    async apiDocumentsQuestionsRetrieve(requestParameters: ApiDocumentsQuestionsRetrieveRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Question> {
        const response = await this.apiDocumentsQuestionsRetrieveRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Allows you to list, create, retrieve, update, and destroy questions.
     */
    async apiDocumentsQuestionsUpdateRaw(requestParameters: ApiDocumentsQuestionsUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Question>> {
        if (requestParameters.documentId === null || requestParameters.documentId === undefined) {
            throw new runtime.RequiredError('documentId','Required parameter requestParameters.documentId was null or undefined when calling apiDocumentsQuestionsUpdate.');
        }

        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling apiDocumentsQuestionsUpdate.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // ApiKeyAuth authentication
        }

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/api/documents/{document_id}/questions/{id}`.replace(`{${"document_id"}}`, encodeURIComponent(String(requestParameters.documentId))).replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: QuestionToJSON(requestParameters.question),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => QuestionFromJSON(jsonValue));
    }

    /**
     * Allows you to list, create, retrieve, update, and destroy questions.
     */
    async apiDocumentsQuestionsUpdate(requestParameters: ApiDocumentsQuestionsUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Question> {
        const response = await this.apiDocumentsQuestionsUpdateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Allows you to list, create, retrieve, update, and destroy documents.
     */
    async apiDocumentsRetrieveRaw(requestParameters: ApiDocumentsRetrieveRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Document>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling apiDocumentsRetrieve.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // ApiKeyAuth authentication
        }

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/api/documents/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => DocumentFromJSON(jsonValue));
    }

    /**
     * Allows you to list, create, retrieve, update, and destroy documents.
     */
    async apiDocumentsRetrieve(requestParameters: ApiDocumentsRetrieveRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Document> {
        const response = await this.apiDocumentsRetrieveRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Allows you to list, create, retrieve, update, and destroy documents.
     */
    async apiDocumentsStartSummaryGenerationRetrieveRaw(requestParameters: ApiDocumentsStartSummaryGenerationRetrieveRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Document>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling apiDocumentsStartSummaryGenerationRetrieve.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // ApiKeyAuth authentication
        }

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/api/documents/{id}/start_summary_generation`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => DocumentFromJSON(jsonValue));
    }

    /**
     * Allows you to list, create, retrieve, update, and destroy documents.
     */
    async apiDocumentsStartSummaryGenerationRetrieve(requestParameters: ApiDocumentsStartSummaryGenerationRetrieveRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Document> {
        const response = await this.apiDocumentsStartSummaryGenerationRetrieveRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Allows you to list, create, retrieve, update, and destroy a document\'s one summary.
     */
    async apiDocumentsSummaryCreateRaw(requestParameters: ApiDocumentsSummaryCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Summary>> {
        if (requestParameters.documentId === null || requestParameters.documentId === undefined) {
            throw new runtime.RequiredError('documentId','Required parameter requestParameters.documentId was null or undefined when calling apiDocumentsSummaryCreate.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // ApiKeyAuth authentication
        }

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/api/documents/{document_id}/summary`.replace(`{${"document_id"}}`, encodeURIComponent(String(requestParameters.documentId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: SummaryToJSON(requestParameters.summary),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SummaryFromJSON(jsonValue));
    }

    /**
     * Allows you to list, create, retrieve, update, and destroy a document\'s one summary.
     */
    async apiDocumentsSummaryCreate(requestParameters: ApiDocumentsSummaryCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Summary> {
        const response = await this.apiDocumentsSummaryCreateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Allows you to list, create, retrieve, update, and destroy a document\'s one summary.
     */
    async apiDocumentsSummaryDestroyRaw(requestParameters: ApiDocumentsSummaryDestroyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.documentId === null || requestParameters.documentId === undefined) {
            throw new runtime.RequiredError('documentId','Required parameter requestParameters.documentId was null or undefined when calling apiDocumentsSummaryDestroy.');
        }

        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling apiDocumentsSummaryDestroy.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // ApiKeyAuth authentication
        }

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/api/documents/{document_id}/summary/{id}`.replace(`{${"document_id"}}`, encodeURIComponent(String(requestParameters.documentId))).replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Allows you to list, create, retrieve, update, and destroy a document\'s one summary.
     */
    async apiDocumentsSummaryDestroy(requestParameters: ApiDocumentsSummaryDestroyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.apiDocumentsSummaryDestroyRaw(requestParameters, initOverrides);
    }

    /**
     * Allows you to list, create, retrieve, update, and destroy a document\'s one summary.
     */
    async apiDocumentsSummaryListRaw(requestParameters: ApiDocumentsSummaryListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PaginatedSummaryList>> {
        if (requestParameters.documentId === null || requestParameters.documentId === undefined) {
            throw new runtime.RequiredError('documentId','Required parameter requestParameters.documentId was null or undefined when calling apiDocumentsSummaryList.');
        }

        const queryParameters: any = {};

        if (requestParameters.page !== undefined) {
            queryParameters['page'] = requestParameters.page;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // ApiKeyAuth authentication
        }

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/api/documents/{document_id}/summary`.replace(`{${"document_id"}}`, encodeURIComponent(String(requestParameters.documentId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PaginatedSummaryListFromJSON(jsonValue));
    }

    /**
     * Allows you to list, create, retrieve, update, and destroy a document\'s one summary.
     */
    async apiDocumentsSummaryList(requestParameters: ApiDocumentsSummaryListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PaginatedSummaryList> {
        const response = await this.apiDocumentsSummaryListRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Allows you to list, create, retrieve, update, and destroy a document\'s one summary.
     */
    async apiDocumentsSummaryPartialUpdateRaw(requestParameters: ApiDocumentsSummaryPartialUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Summary>> {
        if (requestParameters.documentId === null || requestParameters.documentId === undefined) {
            throw new runtime.RequiredError('documentId','Required parameter requestParameters.documentId was null or undefined when calling apiDocumentsSummaryPartialUpdate.');
        }

        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling apiDocumentsSummaryPartialUpdate.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // ApiKeyAuth authentication
        }

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/api/documents/{document_id}/summary/{id}`.replace(`{${"document_id"}}`, encodeURIComponent(String(requestParameters.documentId))).replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: PatchedSummaryToJSON(requestParameters.patchedSummary),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SummaryFromJSON(jsonValue));
    }

    /**
     * Allows you to list, create, retrieve, update, and destroy a document\'s one summary.
     */
    async apiDocumentsSummaryPartialUpdate(requestParameters: ApiDocumentsSummaryPartialUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Summary> {
        const response = await this.apiDocumentsSummaryPartialUpdateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Allows you to list, create, retrieve, update, and destroy a document\'s one summary.
     */
    async apiDocumentsSummaryRetrieveRaw(requestParameters: ApiDocumentsSummaryRetrieveRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Summary>> {
        if (requestParameters.documentId === null || requestParameters.documentId === undefined) {
            throw new runtime.RequiredError('documentId','Required parameter requestParameters.documentId was null or undefined when calling apiDocumentsSummaryRetrieve.');
        }

        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling apiDocumentsSummaryRetrieve.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // ApiKeyAuth authentication
        }

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/api/documents/{document_id}/summary/{id}`.replace(`{${"document_id"}}`, encodeURIComponent(String(requestParameters.documentId))).replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SummaryFromJSON(jsonValue));
    }

    /**
     * Allows you to list, create, retrieve, update, and destroy a document\'s one summary.
     */
    async apiDocumentsSummaryRetrieve(requestParameters: ApiDocumentsSummaryRetrieveRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Summary> {
        const response = await this.apiDocumentsSummaryRetrieveRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Allows you to list, create, retrieve, update, and destroy a document\'s one summary.
     */
    async apiDocumentsSummaryUpdateRaw(requestParameters: ApiDocumentsSummaryUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Summary>> {
        if (requestParameters.documentId === null || requestParameters.documentId === undefined) {
            throw new runtime.RequiredError('documentId','Required parameter requestParameters.documentId was null or undefined when calling apiDocumentsSummaryUpdate.');
        }

        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling apiDocumentsSummaryUpdate.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // ApiKeyAuth authentication
        }

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/api/documents/{document_id}/summary/{id}`.replace(`{${"document_id"}}`, encodeURIComponent(String(requestParameters.documentId))).replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: SummaryToJSON(requestParameters.summary),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SummaryFromJSON(jsonValue));
    }

    /**
     * Allows you to list, create, retrieve, update, and destroy a document\'s one summary.
     */
    async apiDocumentsSummaryUpdate(requestParameters: ApiDocumentsSummaryUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Summary> {
        const response = await this.apiDocumentsSummaryUpdateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Allows you to list, create, retrieve, update, and destroy documents.
     */
    async apiDocumentsUpdateRaw(requestParameters: ApiDocumentsUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Document>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling apiDocumentsUpdate.');
        }

        if (requestParameters.id2 === null || requestParameters.id2 === undefined) {
            throw new runtime.RequiredError('id2','Required parameter requestParameters.id2 was null or undefined when calling apiDocumentsUpdate.');
        }

        if (requestParameters.createdAt === null || requestParameters.createdAt === undefined) {
            throw new runtime.RequiredError('createdAt','Required parameter requestParameters.createdAt was null or undefined when calling apiDocumentsUpdate.');
        }

        if (requestParameters.updatedAt === null || requestParameters.updatedAt === undefined) {
            throw new runtime.RequiredError('updatedAt','Required parameter requestParameters.updatedAt was null or undefined when calling apiDocumentsUpdate.');
        }

        if (requestParameters.user === null || requestParameters.user === undefined) {
            throw new runtime.RequiredError('user','Required parameter requestParameters.user was null or undefined when calling apiDocumentsUpdate.');
        }

        if (requestParameters.summary === null || requestParameters.summary === undefined) {
            throw new runtime.RequiredError('summary','Required parameter requestParameters.summary was null or undefined when calling apiDocumentsUpdate.');
        }

        if (requestParameters.questions === null || requestParameters.questions === undefined) {
            throw new runtime.RequiredError('questions','Required parameter requestParameters.questions was null or undefined when calling apiDocumentsUpdate.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // ApiKeyAuth authentication
        }

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const consumes: runtime.Consume[] = [
            { contentType: 'multipart/form-data' },
            { contentType: 'application/x-www-form-urlencoded' },
        ];
        // @ts-ignore: canConsumeForm may be unused
        const canConsumeForm = runtime.canConsumeForm(consumes);

        let formParams: { append(param: string, value: any): any };
        let useForm = false;
        if (useForm) {
            formParams = new FormData();
        } else {
            formParams = new URLSearchParams();
        }

        if (requestParameters.id2 !== undefined) {
            formParams.append('id', requestParameters.id2 as any);
        }

        if (requestParameters.file !== undefined) {
            formParams.append('file', requestParameters.file as any);
        }

        if (requestParameters.createdAt !== undefined) {
            formParams.append('created_at', requestParameters.createdAt as any);
        }

        if (requestParameters.title !== undefined) {
            formParams.append('title', requestParameters.title as any);
        }

        if (requestParameters.updatedAt !== undefined) {
            formParams.append('updated_at', requestParameters.updatedAt as any);
        }

        if (requestParameters.user !== undefined) {
            formParams.append('user', requestParameters.user as any);
        }

        if (requestParameters.summary !== undefined) {
            formParams.append('summary', requestParameters.summary as any);
        }

        if (requestParameters.questions) {
            formParams.append('questions', requestParameters.questions.join(runtime.COLLECTION_FORMATS["csv"]));
        }

        if (requestParameters.ocrText !== undefined) {
            formParams.append('ocr_text', requestParameters.ocrText as any);
        }

        const response = await this.request({
            path: `/api/documents/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: formParams,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => DocumentFromJSON(jsonValue));
    }

    /**
     * Allows you to list, create, retrieve, update, and destroy documents.
     */
    async apiDocumentsUpdate(requestParameters: ApiDocumentsUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Document> {
        const response = await this.apiDocumentsUpdateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * API endpoint that allows users to be viewed.
     */
    async apiUsersListRaw(requestParameters: ApiUsersListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PaginatedUserList>> {
        const queryParameters: any = {};

        if (requestParameters.page !== undefined) {
            queryParameters['page'] = requestParameters.page;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // ApiKeyAuth authentication
        }

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/api/users`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PaginatedUserListFromJSON(jsonValue));
    }

    /**
     * API endpoint that allows users to be viewed.
     */
    async apiUsersList(requestParameters: ApiUsersListRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PaginatedUserList> {
        const response = await this.apiUsersListRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * API endpoint that allows users to be viewed.
     */
    async apiUsersRetrieveRaw(requestParameters: ApiUsersRetrieveRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<User>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling apiUsersRetrieve.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // ApiKeyAuth authentication
        }

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/api/users/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => UserFromJSON(jsonValue));
    }

    /**
     * API endpoint that allows users to be viewed.
     */
    async apiUsersRetrieve(requestParameters: ApiUsersRetrieveRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<User> {
        const response = await this.apiUsersRetrieveRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
